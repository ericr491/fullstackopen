{"version":3,"sources":["services/phoneServices.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPhoneObject","post","console","log","pId","delete","id","put","App","useState","persons","setPersons","textField","setTextField","newNumber","setNewNumber","filterText","setFilterText","notificationMsg","setNotificationMsg","Notification","msg","includes","style","color","background","fontSize","borderStyle","borderRadius","padding","marginBottom","useEffect","phoneServices","phoneObject","deletePerson","personToBeDeleted","find","person","filter","name","catch","setTimeout","value","onChange","event","target","onSubmit","b","forEach","containsPerson","e","preventDefault","idOfOldPerson","newPerson","number","updatedObj","map","p","personObj","addedObject","concat","error","type","toLowerCase","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9459b835.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then((response) => response.data)\r\n}\r\n\r\nconst create = (newPhoneObject) => {\r\n    const request = axios.post(baseUrl, newPhoneObject)\r\n    return request.then((response) => {\r\n        console.log(response.data)\r\n        // response.data is the single object posted not the entire array\r\n        return response.data\r\n    })\r\n}\r\n\r\nconst deletePhone = (pId) => {\r\n    const request = axios.delete(baseUrl + '/' + pId)\r\n    return request.then(response => {\r\n        // empty\r\n        console.log(response.data)\r\n        return response.data\r\n    })\r\n}\r\n\r\nconst updatePhone = (id, newPhoneObject) => {\r\n    const request = axios.put(baseUrl + '/' + id, newPhoneObject)\r\n    return request.then(response => {\r\n        // new updated one\r\n        console.log(response.data)\r\n        return response.data\r\n    })\r\n}\r\n\r\n\r\n\r\nexport default { getAll, create, deletePhone, updatePhone }","import React, { useState, useEffect } from 'react'\nimport phoneServices from './services/phoneServices'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [textField, setTextField] = useState('input name')\n  const [newNumber, setNewNumber] = useState('input number')\n  const [filterText, setFilterText] = useState('')\n  const [notificationMsg, setNotificationMsg] = useState(null)\n\n  const Notification = ({ msg }) => {\n    if (msg == null) {\n      return null\n    }\n\n    const greenStyle = {\n      color: \"green\",\n      background: \"lightgrey\",\n      fontSize: 20,\n      borderStyle: \"solid\",\n      borderRadius: 5,\n      padding: 10,\n      marginBottom: 10,\n    }\n\n    const redStyle = {\n      color: \"red\",\n      background: \"lightgrey\",\n      fontSize: 20,\n      borderStyle: \"solid\",\n      borderRadius: 5,\n      padding: 10,\n      marginBottom: 10,\n    }\n\n    if (msg.includes(\"not\") || msg.includes(\"delete\") || msg.includes(\"fail\"))\n      return (\n        <div style={redStyle}>\n          {msg}\n        </div>\n      )\n    else\n      return (\n        <div style={greenStyle}>\n          {msg}\n        </div>\n      )\n  }\n\n  const hook = () => {\n    phoneServices.getAll().then((phoneObject) => {\n      setPersons(phoneObject)\n    })\n  }\n\n  useEffect(hook, [])\n\n  const filterArray = () => {\n    if (filterText === \"\")\n      return persons\n\n    const filterObj = persons.filter(\n      person => person.name.toLowerCase().includes(filterText.toLowerCase())\n    )\n    return filterObj\n  }\n\n  const renderArray = (arrays) => {\n    return arrays.map(person => <div>{person.name + ' ' + person.number}<button onClick={() => deletePerson(person.id)} value={person.id}>delete</button></div>)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault();\n\n    const personObj = {\n      name: textField,\n      number: newNumber,\n    }\n\n    console.log(personObj)\n\n    phoneServices\n      .create(personObj)\n      .then((addedObject) => {\n        setPersons(persons.concat(addedObject))\n        setTextField('')\n        setNewNumber('')\n      })\n      .then(() => {\n        setNotificationMsg(\"Added \" + personObj.name)\n        setTimeout(() => setNotificationMsg(null), 5000)\n      })\n      .catch(error => {\n        console.log(error.response.data)\n        setNotificationMsg(\"Person validation failed: \" + error.response.data.error)\n        setTimeout(() => setNotificationMsg(null), 5000)\n        setTextField('')\n        setNewNumber('')\n      })\n\n  }\n\n  // const deletePerson = (event) => {\n  //   const deletedID = event.target.value\n  //   phoneServices\n  //     .deletePhone(deletedID)\n  //     .then(() => setPersons(persons.filter(person => person.id != deletedID)))\n  //     .catch(() => console.log('fail'))\n  // }\n\n  const deletePerson = (id) => {\n    const personToBeDeleted = persons.find(person => person.id == id)\n\n    phoneServices\n      .deletePhone(id)\n      .then(() => {\n        setPersons(persons.filter(person => person.id != id))\n        setNotificationMsg(personToBeDeleted.name + \" has been deleted\")\n      })\n      .catch(() => {\n        setNotificationMsg(\"Person not found in server\")\n        setPersons(persons.filter((person) => person.id != id))\n        setTimeout(() => setNotificationMsg(null), 5000)\n      })\n  }\n\n  const updatePerson = (e) => {\n    e.preventDefault()\n    const idOfOldPerson = persons.find(person => person.name === textField)\n    const newPerson = { ...idOfOldPerson, name: textField, number: newNumber }\n\n    phoneServices.updatePhone(newPerson.id, newPerson)\n      .then((updatedObj) => setPersons(persons.map(p => p.id !== newPerson.id ? p : updatedObj)))\n      .then(() => {\n        setTextField('')\n        setNewNumber('')\n      })\n      .then(() => {\n        setNotificationMsg(\"Replaced \" + newPerson.name)\n        setTimeout(() => setNotificationMsg(null)\n          , 5000)\n      })\n      .catch(() => {\n        setNotificationMsg(newPerson.name + \" not found in server\")\n        setPersons(persons.filter((person) => person.id != newPerson.id))\n        setTimeout(() => setNotificationMsg(null), 5000)\n      })\n  }\n\n  const containsPerson = () => {\n    let b = false\n    persons.forEach(person => {\n      if (person.name === textField)\n        b = true\n    })\n    return b\n  }\n\n  const handlerText = (event) => {\n    setTextField(event.target.value)\n  }\n\n  const handlerNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handlerFilter = (event) => {\n    setFilterText(event.target.value)\n  }\n\n  // the magic for the callback func in onClick is to add '() =>' function(parameters), so you can pass in data via parameters\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification msg={notificationMsg} />\n      <form>\n        <div>\n          filter shown with <input value={filterText} onChange={handlerFilter} />\n        </div>\n      </form>\n\n      <h2>Add a new Contact</h2>\n      <form onSubmit={containsPerson() ? updatePerson : addPerson}>\n        <div>\n          name: <input value={textField} onChange={handlerText} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handlerNumber} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <div>\n        {renderArray(filterArray())}\n      </div>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n)\n"],"sourceRoot":""}